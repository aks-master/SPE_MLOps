name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest
    environment: spemlops

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          pip install -r requirements.txt

      - name: run pipeline
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          dvc remote modify myremote access_key_id $ACCESS_KEY
          dvc remote modify myremote secret_access_key $SECRET_KEY
          dvc repro
          dvc push

      - name: Run model tests
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python -m unittest tests/test_flask_app.py

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_R }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY_R }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        if: success()
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      - name: Tag Docker image
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Check Docker Authentication
        run: docker info

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Set up Ansible
        run: |
          python -m pip install ansible
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run Ansible Playbook for EKS Deployment
        run: ansible-playbook ansible/playbook.yml
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ACCESS_KEY_R: ${{ secrets.ACCESS_KEY_R }}
          SECRET_KEY_R: ${{ secrets.SECRET_KEY_R }}
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
